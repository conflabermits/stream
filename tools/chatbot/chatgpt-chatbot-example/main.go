// Generated by ChatGPT, mostly

package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/gempir/go-twitch-irc/v4"
)

func getEnvVar(key string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		fmt.Printf("Error: Environment variable %s is not set\n", key)
		os.Exit(1)
	}
	return value
}

func main() {
	// Set your Twitch username, OAuth token, and channel to join
	//username := "your_twitch_username"
	//token := "your_oauth_token"
	//channel := "channel_to_join"
	username := getEnvVar("twitchUsername") //e.g., "conflabermits"
	token := getEnvVar("twitchToken")       //e.g., "oauth:<token>"
	channel := getEnvVar("twitchChannel")   //e.g., "conflabermits"

	// Create a new Twitch client
	client := twitch.NewClient(username, token)

	// Register a callback for when the bot receives a message
	client.OnPrivateMessage(func(message twitch.PrivateMessage) {
		// Print the message to the console
		fmt.Printf("[%s] %s: %s\n", message.Channel, message.User.DisplayName, message.Message)

		// You can add your own logic here to respond to messages
		// For example, you can check for specific commands and reply accordingly
		if message.Message == "!hello" {
			log.Println("Detected !hello message")
			client.Say(message.Channel, "Hello, "+message.User.DisplayName+"!")
		}
		if message.Message == "!bottest" {
			log.Println("Detected !bottest message")
			client.Say(message.Channel, "Hello, "+message.User.DisplayName+"! This is a test of the bot!")
		}
	})

	client.OnConnect(func() { client.Say("conflabermits", "I'm in!") })

	// Join the specified channel
	client.Join(channel)

	// Connect to Twitch IRC -- CURRENTLY FAILING HERE
	err := client.Connect()
	if err != nil {
		log.Fatal(err)
	}

	// Wait for a signal to gracefully shut down the bot
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
	<-sigChan

	// Disconnect from Twitch IRC on shutdown
	client.Disconnect()
}
